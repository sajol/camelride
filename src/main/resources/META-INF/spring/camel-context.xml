<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
       http://camel.apache.org/schema/spring/camel-spring.xsd">

  <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
    <property name="connectionFactory">
      <bean class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="vm://localhost"/>
      </bean>
    </property>
  </bean>

  <!--<bean id="ftpToJmsSpringExample" class="camelride.FTPToJmsSpringExample"/>-->
  <bean id="downloadLogger" class="camelride.DownloadLogger"/>
  <bean id="csvOrderLogger" class="camelride.logger.order.CSVOrderLogger"/>
  <bean id="xmlOrderLogger" class="camelride.logger.order.XmlOrderLogger"/>
  <bean id="accountingLogger" class="camelride.logger.order.AccountingLogger"/>
  <bean id="productionLogger" class="camelride.logger.order.ProductionLogger"/>

  <!--<bean id="executor" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
    <constructor-arg index="0" value="10"/>
  </bean>-->

  <camelContext xmlns="http://camel.apache.org/schema/spring">

    <!--<routeBuilder ref="ftpToJmsSpringExample"/>-->

    <!--<route>
      <from uri="ftp://example.com/orders?username=***&amp;password=***"/>
      <to uri="jms:incomingOrders"/>
    </route>-->

    <route>
      <from uri="file:data/inbox?noop=true"/>
      <process ref="downloadLogger"/>
      <to uri="jms:queue:incomingOrders"/>
    </route>

    <route>
      <from uri="jms:queue:incomingOrders"/>
      <process ref="downloadLogger"/>
    </route>

    <route>
      <from uri="jms:queue:incomingOrders"/>
      <choice>
        <when>
          <simple>${header.CamelFileName} regex '^.*xml$'</simple>
          <to uri="jms:queue:xmlOrders"/>
        </when>
        <when>
          <simple>${header.CamelFileName} regex '^.*(csv|csl)$'</simple>
          <to uri="jms:queue:csvOrders"/>
        </when>
      </choice>
    </route>

    <route>
      <from uri="jms:queue:xmlOrders"/>
      <filter>
        <xpath>/order[not(@test)]</xpath>
        <process ref="xmlOrderLogger"/>
        <multicast>
          <to uri="jms:queue:accounting"/>
          <to uri="jms:queue:production"/>
        </multicast>
      </filter>
    </route>

    <route>
      <from uri="jms:queue:csvOrders"/>
      <process ref="csvOrderLogger"/>
    </route>

    <route>
      <from uri="jms:queue:accounting"/>
      <process ref="accountingLogger"/>
    </route>

    <route>
      <from uri="jms:queue:production"/>
      <process ref="productionLogger"/>
    </route>

    <!-- here is a sample which processes the input files
         (leaving them in place - see the 'noop' flag)
         then performs content based routing on the message using XPath -->
    <route>
      <from uri="file:src/data?noop=true"/>
      <choice>
        <when>
          <xpath>/person/city = 'London'</xpath>
          <log message="UK message"/>
          <to uri="file:target/messages/uk"/>
        </when>
        <otherwise>
          <log message="Other message"/>
          <to uri="file:target/messages/others"/>
        </otherwise>
      </choice>
    </route>

  </camelContext>

</beans>
